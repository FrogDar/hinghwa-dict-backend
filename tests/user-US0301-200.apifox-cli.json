{
  "apifoxCli": "1.1.0",
  "item": [
    {
      "item": [
        {
          "id": "f38a7d72-e6c7-4ab7-98a6-501c99987513",
          "name": "LG0101 账号密码登录(登录用户user_test)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "login"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "token",
                "value": "{{token}}"
              },
              {
                "key": "User-Agent",
                "value": "apifox/1.0.0 (https://www.apifox.cn)"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"user_test\",\r\n    \"password\": \"123456\"\r\n}"
            },
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.extractor",
                "type": "text/javascript",
                "exec": [
                  "",
                  "      try{",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.token`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          const jsonData = pm.response.json();",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "          ",
                  "        ",
                  "        switch (typeof value) {",
                  "          case 'object':",
                  "            value = JSON.stringify(value);",
                  "            break;",
                  "          default:",
                  "            value = String(value);",
                  "            break;",
                  "        }",
                  "      ",
                  "        pm.environment.set(`token`, value);console.log('已设置环境变量【'+ `token` + '】，值为【' + value + '】')",
                  "      } catch(e) {",
                  "        e.message = '提取变量【token】出错：' + e.message;",
                  "        throw e;",
                  "      }",
                  "  "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.1.extractor",
                "type": "text/javascript",
                "exec": [
                  "",
                  "      try{",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.id`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          const jsonData = pm.response.json();",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "          ",
                  "        ",
                  "        switch (typeof value) {",
                  "          case 'object':",
                  "            value = JSON.stringify(value);",
                  "            break;",
                  "          default:",
                  "            value = String(value);",
                  "            break;",
                  "        }",
                  "      ",
                  "        pm.environment.set(`user_id`, value);console.log('已设置环境变量【'+ `user_id` + '】，值为【' + value + '】')",
                  "      } catch(e) {",
                  "        e.message = '提取变量【user_id】出错：' + e.message;",
                  "        throw e;",
                  "      }",
                  "  "
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 4183271,
            "createdAt": "2021-07-29T14:43:37.000Z",
            "updatedAt": "2021-08-12T16:27:18.000Z",
            "deletedAt": null,
            "apiDetailId": 5318056,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "mock": {
                    "mock": "@string"
                  },
                  "title": "权"
                },
                "id": {
                  "type": "integer",
                  "title": "用户id"
                }
              },
              "required": [
                "token",
                "id"
              ]
            },
            "defaultEnable": true,
            "projectId": 0,
            "ordering": 1
          },
          "metaInfo": {
            "httpApiId": 5318056,
            "httpApiCaseId": 67325887,
            "httpApiName": "LG0101 账号密码登录",
            "httpApiPath": "/login",
            "httpApiMethod": "post",
            "httpApiCaseName": "登录用户user_test"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "disableUrlEncoding": false
          }
        },
        {
          "id": "97a2a045-7cf1-459a-a77a-d611a985c1b9",
          "name": "US0301 更新用户信息（除password和email外）(US0301 更新用户信息（除password和email外）)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "users",
                "{{user_id}}"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "token",
                "value": "{{token}}"
              },
              {
                "key": "User-Agent",
                "value": "apifox/1.0.0 (https://www.apifox.cn)"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"user\": {\r\n        \"avatar\": \"https://cos.edialect.top/website/默认头像.jpg\",\r\n        \"telephone\": \"18155364287\",\r\n        \"nickname\": \"龚刚\",\r\n        \"birthday\": \"2022-01-21\",\r\n        \"town\": \"南区\",\r\n        \"username\": \"孔勇\",\r\n        \"county\": \"大城县\"\r\n    }\r\n}"
            },
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "commonScript.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  " ____string2Number = function(value, errorMsg) {",
                  "  if(typeof value !== 'string'){",
                  "    return value;",
                  "  }",
                  "  // 转换成数字类型后比较",
                  "  if (/^\\-?\\d+$/.test(value)) {",
                  "      return parseInt(value);",
                  "  } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {",
                  "      return parseFloat(value);",
                  "  } else {",
                  "      throw new Error(errorMsg || '数据类型不匹配')",
                  "  }",
                  "}",
                  "",
                  " ____formatValues = function(value, stringCompareValue, comparison) {",
                  "  try{",
                  "    const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);",
                  "    let compareValue;",
                  "    switch (typeof value) {",
                  "        case 'string':",
                  "            if (isNumberComparisons) {",
                  "                value = ____string2Number(value);",
                  "                compareValue = ____string2Number(stringCompareValue);",
                  "            } else {",
                  "                compareValue = stringCompareValue;",
                  "            }",
                  "            break;",
                  "        case 'object':",
                  "            if (isNumberComparisons) {",
                  "                throw new Error('object 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "            }",
                  "            try {",
                  "                compareValue = JSON.parse(stringCompareValue);",
                  "            } catch (e) {",
                  "                compareValue = stringCompareValue;",
                  "            }",
                  "            break;",
                  "        case 'boolean':",
                  "            if (isNumberComparisons) {",
                  "                throw new Error('boolean 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "            }",
                  "            compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);",
                  "            break;",
                  "        case 'number':",
                  "            if (isNumberComparisons) {",
                  "              compareValue = ____string2Number(stringCompareValue);",
                  "            } else {",
                  "              compareValue = stringCompareValue;",
                  "              value = '' + value;",
                  "            }",
                  "            break;",
                  "        case 'null':",
                  "            if (isNumberComparisons) {",
                  "                throw new Error('null 值不能使用 ' + comparison + ' 方式比较')",
                  "            }",
                  "            compareValue = stringCompareValue === 'null' ? null : stringCompareValue;",
                  "            break;",
                  "        default:",
                  "            compareValue = stringCompareValue;",
                  "            break;",
                  "    }",
                  "    return { compareValue, value };",
                  "  } catch(e) {",
                  "    console.log(e);",
                  "    throw e;",
                  "  }",
                  "}",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.assertion",
                "type": "text/javascript",
                "exec": [
                  "pm.test(pm.variables.replaceIn(`$.user.telephone 等于 18155364287`), function() {",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.user.telephone`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          let jsonData;",
                  "          try {",
                  "            jsonData = pm.response.json();",
                  "          } catch(e) {",
                  "            let text = pm.response.text();",
                  "            // xml 转 json",
                  "            const xml2js = require('xml2js');",
                  "            text = text.replace(/^[^<]*/, '').replace(/[^>]*$/, '');",
                  "            let json;",
                  "            let xmlParseOptions = {",
                  "                explicitArray: false,",
                  "                trim: true,",
                  "                ignoreAttrs: true,",
                  "            };",
                  "            xml2js.parseString(text, xmlParseOptions, function (_, result) {",
                  "                jsonData = result;",
                  "            });",
                  "          }",
                  "          const value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "          ",
                  "        const formattedValues = ____formatValues(value, pm.variables.replaceIn(`18155364287`), 'equal');",
                  "        pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);",
                  "      });"
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 4116007,
            "createdAt": "2021-07-28T16:52:38.000Z",
            "updatedAt": "2021-08-01T09:15:33.000Z",
            "deletedAt": null,
            "apiDetailId": 5298310,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "mock": {
                    "mock": "@string"
                  }
                }
              },
              "required": [
                "token"
              ]
            },
            "defaultEnable": true,
            "projectId": 0,
            "ordering": 1
          },
          "metaInfo": {
            "httpApiId": 5298310,
            "httpApiCaseId": 67325909,
            "httpApiName": "US0301 更新用户信息（除password和email外）",
            "httpApiPath": "/users/{id}",
            "httpApiMethod": "put",
            "httpApiCaseName": "US0301 更新用户信息（除password和email外）"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "disableUrlEncoding": false
          }
        }
      ],
      "name": "用户信息修改"
    }
  ],
  "info": {
    "name": "用户信息修改"
  },
  "dataSchemas": {},
  "environment": {
    "id": 510825,
    "name": "测试环境",
    "baseUrls": {
      "default": "http://127.0.0.1:8000"
    },
    "variable": {
      "id": "de42db95-980e-495e-938c-58fe43a56c7e",
      "name": "测试环境",
      "values": [
        {
          "type": "any",
          "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InVzZXJfdGVzdCIsImlkIjoxMzksImV4cCI6MTY3NDc5NDcxNy4yMDEwMTV9.UJkJ3XhA6uISytaZoW1pBwN_UQJzPsROcWYld5bR-Us",
          "key": "token"
        },
        {
          "type": "any",
          "value": "139",
          "key": "user_id"
        },
        {
          "type": "any",
          "value": "{\"id\":139,\"username\":\"user_test\",\"nickname\":\"user_test\",\"email\":\"user_test@user_test.com\",\"telephone\":\"\",\"registration_time\":\"2023-01-17 19:47:22\",\"birthday\":\"1970-01-01\",\"avatar\":\"https://cos.edialect.top/website/默认头像.jpg\",\"county\":\"\",\"town\":\"\",\"is_admin\":false,\"wechat\":false,\"login_time\":\"2023-01-20 04:45:17\"}",
          "key": "user"
        }
      ]
    },
    "type": "normal",
    "parameter": {
      "header": [],
      "query": [],
      "body": [],
      "cookie": []
    }
  },
  "globals": {
    "variable": {
      "id": "d5f74f05-0485-4f74-90c1-18f15ecf20df",
      "values": []
    },
    "parameter": {
      "header": [],
      "query": [],
      "body": [],
      "cookie": []
    }
  },
  "isServerBuild": false
}
